/*
 * This file is generated by jOOQ.
 */
package com.example.onboardingservice.jooq.tables;


import com.example.onboardingservice.jooq.Keys;
import com.example.onboardingservice.jooq.Public;
import com.example.onboardingservice.jooq.tables.records._DatabasechangeloglockRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _Databasechangeloglock extends TableImpl<_DatabasechangeloglockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public._databasechangeloglock</code>
     */
    public static final _Databasechangeloglock _DATABASECHANGELOGLOCK = new _Databasechangeloglock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_DatabasechangeloglockRecord> getRecordType() {
        return _DatabasechangeloglockRecord.class;
    }

    /**
     * The column <code>public._databasechangeloglock.id</code>.
     */
    public final TableField<_DatabasechangeloglockRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public._databasechangeloglock.locked</code>.
     */
    public final TableField<_DatabasechangeloglockRecord, Boolean> LOCKED = createField(DSL.name("locked"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public._databasechangeloglock.lockgranted</code>.
     */
    public final TableField<_DatabasechangeloglockRecord, LocalDateTime> LOCKGRANTED = createField(DSL.name("lockgranted"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public._databasechangeloglock.lockedby</code>.
     */
    public final TableField<_DatabasechangeloglockRecord, String> LOCKEDBY = createField(DSL.name("lockedby"), SQLDataType.VARCHAR(255), this, "");

    private _Databasechangeloglock(Name alias, Table<_DatabasechangeloglockRecord> aliased) {
        this(alias, aliased, null);
    }

    private _Databasechangeloglock(Name alias, Table<_DatabasechangeloglockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public._databasechangeloglock</code> table
     * reference
     */
    public _Databasechangeloglock(String alias) {
        this(DSL.name(alias), _DATABASECHANGELOGLOCK);
    }

    /**
     * Create an aliased <code>public._databasechangeloglock</code> table
     * reference
     */
    public _Databasechangeloglock(Name alias) {
        this(alias, _DATABASECHANGELOGLOCK);
    }

    /**
     * Create a <code>public._databasechangeloglock</code> table reference
     */
    public _Databasechangeloglock() {
        this(DSL.name("_databasechangeloglock"), null);
    }

    public <O extends Record> _Databasechangeloglock(Table<O> child, ForeignKey<O, _DatabasechangeloglockRecord> key) {
        super(child, key, _DATABASECHANGELOGLOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<_DatabasechangeloglockRecord> getPrimaryKey() {
        return Keys._DATABASECHANGELOGLOCK_PKEY;
    }

    @Override
    public _Databasechangeloglock as(String alias) {
        return new _Databasechangeloglock(DSL.name(alias), this);
    }

    @Override
    public _Databasechangeloglock as(Name alias) {
        return new _Databasechangeloglock(alias, this);
    }

    @Override
    public _Databasechangeloglock as(Table<?> alias) {
        return new _Databasechangeloglock(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangeloglock rename(String name) {
        return new _Databasechangeloglock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangeloglock rename(Name name) {
        return new _Databasechangeloglock(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangeloglock rename(Table<?> name) {
        return new _Databasechangeloglock(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Boolean, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Boolean, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Boolean, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
