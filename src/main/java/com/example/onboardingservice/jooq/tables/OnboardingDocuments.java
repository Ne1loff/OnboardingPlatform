/*
 * This file is generated by jOOQ.
 */
package com.example.onboardingservice.jooq.tables;


import com.example.onboardingservice.jooq.Keys;
import com.example.onboardingservice.jooq.Public;
import com.example.onboardingservice.jooq.tables.records.OnboardingDocumentsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OnboardingDocuments extends TableImpl<OnboardingDocumentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.onboarding_documents</code>
     */
    public static final OnboardingDocuments ONBOARDING_DOCUMENTS = new OnboardingDocuments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OnboardingDocumentsRecord> getRecordType() {
        return OnboardingDocumentsRecord.class;
    }

    /**
     * The column <code>public.onboarding_documents.key</code>.
     */
    public final TableField<OnboardingDocumentsRecord, UUID> KEY = createField(DSL.name("key"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.onboarding_documents.filename</code>.
     */
    public final TableField<OnboardingDocumentsRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    private OnboardingDocuments(Name alias, Table<OnboardingDocumentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OnboardingDocuments(Name alias, Table<OnboardingDocumentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.onboarding_documents</code> table
     * reference
     */
    public OnboardingDocuments(String alias) {
        this(DSL.name(alias), ONBOARDING_DOCUMENTS);
    }

    /**
     * Create an aliased <code>public.onboarding_documents</code> table
     * reference
     */
    public OnboardingDocuments(Name alias) {
        this(alias, ONBOARDING_DOCUMENTS);
    }

    /**
     * Create a <code>public.onboarding_documents</code> table reference
     */
    public OnboardingDocuments() {
        this(DSL.name("onboarding_documents"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OnboardingDocumentsRecord> getPrimaryKey() {
        return Keys.ONBOARDING_DOCUMENTS_PKEY;
    }

    @Override
    public OnboardingDocuments as(String alias) {
        return new OnboardingDocuments(DSL.name(alias), this);
    }

    @Override
    public OnboardingDocuments as(Name alias) {
        return new OnboardingDocuments(alias, this);
    }

    @Override
    public OnboardingDocuments as(Table<?> alias) {
        return new OnboardingDocuments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OnboardingDocuments rename(String name) {
        return new OnboardingDocuments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OnboardingDocuments rename(Name name) {
        return new OnboardingDocuments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OnboardingDocuments rename(Table<?> name) {
        return new OnboardingDocuments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments where(Condition condition) {
        return new OnboardingDocuments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnboardingDocuments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnboardingDocuments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnboardingDocuments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnboardingDocuments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnboardingDocuments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
