/*
 * This file is generated by jOOQ.
 */
package com.example.onboardingservice.jooq.tables;


import com.example.onboardingservice.jooq.Public;
import com.example.onboardingservice.jooq.tables.records._DatabasechangelogRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _Databasechangelog extends TableImpl<_DatabasechangelogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public._databasechangelog</code>
     */
    public static final _Databasechangelog _DATABASECHANGELOG = new _Databasechangelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_DatabasechangelogRecord> getRecordType() {
        return _DatabasechangelogRecord.class;
    }

    /**
     * The column <code>public._databasechangelog.id</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.author</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.filename</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.dateexecuted</code>.
     */
    public final TableField<_DatabasechangelogRecord, LocalDateTime> DATEEXECUTED = createField(DSL.name("dateexecuted"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.orderexecuted</code>.
     */
    public final TableField<_DatabasechangelogRecord, Integer> ORDEREXECUTED = createField(DSL.name("orderexecuted"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.exectype</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> EXECTYPE = createField(DSL.name("exectype"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public._databasechangelog.md5sum</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> MD5SUM = createField(DSL.name("md5sum"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>public._databasechangelog.description</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._databasechangelog.comments</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._databasechangelog.tag</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._databasechangelog.liquibase</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> LIQUIBASE = createField(DSL.name("liquibase"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public._databasechangelog.contexts</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> CONTEXTS = createField(DSL.name("contexts"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._databasechangelog.labels</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> LABELS = createField(DSL.name("labels"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._databasechangelog.deployment_id</code>.
     */
    public final TableField<_DatabasechangelogRecord, String> DEPLOYMENT_ID = createField(DSL.name("deployment_id"), SQLDataType.VARCHAR(10), this, "");

    private _Databasechangelog(Name alias, Table<_DatabasechangelogRecord> aliased) {
        this(alias, aliased, null);
    }

    private _Databasechangelog(Name alias, Table<_DatabasechangelogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public._databasechangelog</code> table reference
     */
    public _Databasechangelog(String alias) {
        this(DSL.name(alias), _DATABASECHANGELOG);
    }

    /**
     * Create an aliased <code>public._databasechangelog</code> table reference
     */
    public _Databasechangelog(Name alias) {
        this(alias, _DATABASECHANGELOG);
    }

    /**
     * Create a <code>public._databasechangelog</code> table reference
     */
    public _Databasechangelog() {
        this(DSL.name("_databasechangelog"), null);
    }

    public <O extends Record> _Databasechangelog(Table<O> child, ForeignKey<O, _DatabasechangelogRecord> key) {
        super(child, key, _DATABASECHANGELOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public _Databasechangelog as(String alias) {
        return new _Databasechangelog(DSL.name(alias), this);
    }

    @Override
    public _Databasechangelog as(Name alias) {
        return new _Databasechangelog(alias, this);
    }

    @Override
    public _Databasechangelog as(Table<?> alias) {
        return new _Databasechangelog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangelog rename(String name) {
        return new _Databasechangelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangelog rename(Name name) {
        return new _Databasechangelog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public _Databasechangelog rename(Table<?> name) {
        return new _Databasechangelog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
