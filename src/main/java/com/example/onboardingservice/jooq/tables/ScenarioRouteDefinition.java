/*
 * This file is generated by jOOQ.
 */
package com.example.onboardingservice.jooq.tables;


import com.example.onboardingservice.jooq.Keys;
import com.example.onboardingservice.jooq.Public;
import com.example.onboardingservice.jooq.tables.records.ScenarioRouteDefinitionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ScenarioRouteDefinition extends TableImpl<ScenarioRouteDefinitionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scenario_route_definition</code>
     */
    public static final ScenarioRouteDefinition SCENARIO_ROUTE_DEFINITION = new ScenarioRouteDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioRouteDefinitionRecord> getRecordType() {
        return ScenarioRouteDefinitionRecord.class;
    }

    /**
     * The column <code>public.scenario_route_definition.scenario_name</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, String> SCENARIO_NAME = createField(DSL.name("scenario_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.scenario_route_definition.first_action_id</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, UUID> FIRST_ACTION_ID = createField(DSL.name("first_action_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.scenario_route_definition.route_source</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, JSONB> ROUTE_SOURCE = createField(DSL.name("route_source"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.scenario_route_definition.matcher</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, JSONB> MATCHER = createField(DSL.name("matcher"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.scenario_route_definition.id</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.scenario_route_definition.status</code>.
     */
    public final TableField<ScenarioRouteDefinitionRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'DRAFT'::character varying"), SQLDataType.VARCHAR)), this, "");

    private ScenarioRouteDefinition(Name alias, Table<ScenarioRouteDefinitionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ScenarioRouteDefinition(Name alias, Table<ScenarioRouteDefinitionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.scenario_route_definition</code> table
     * reference
     */
    public ScenarioRouteDefinition(String alias) {
        this(DSL.name(alias), SCENARIO_ROUTE_DEFINITION);
    }

    /**
     * Create an aliased <code>public.scenario_route_definition</code> table
     * reference
     */
    public ScenarioRouteDefinition(Name alias) {
        this(alias, SCENARIO_ROUTE_DEFINITION);
    }

    /**
     * Create a <code>public.scenario_route_definition</code> table reference
     */
    public ScenarioRouteDefinition() {
        this(DSL.name("scenario_route_definition"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ScenarioRouteDefinitionRecord> getPrimaryKey() {
        return Keys.SCENARIO_ROUTE_DEFINITION_PKEY;
    }

    @Override
    public ScenarioRouteDefinition as(String alias) {
        return new ScenarioRouteDefinition(DSL.name(alias), this);
    }

    @Override
    public ScenarioRouteDefinition as(Name alias) {
        return new ScenarioRouteDefinition(alias, this);
    }

    @Override
    public ScenarioRouteDefinition as(Table<?> alias) {
        return new ScenarioRouteDefinition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioRouteDefinition rename(String name) {
        return new ScenarioRouteDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioRouteDefinition rename(Name name) {
        return new ScenarioRouteDefinition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioRouteDefinition rename(Table<?> name) {
        return new ScenarioRouteDefinition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition where(Condition condition) {
        return new ScenarioRouteDefinition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ScenarioRouteDefinition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ScenarioRouteDefinition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ScenarioRouteDefinition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ScenarioRouteDefinition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ScenarioRouteDefinition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
